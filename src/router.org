 #+TITLE:     Router - Design Model and Implementation
#+DATE:      2015-03-25 Wed
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org
#+DESCRIPTION: Router Design and  Documentation
#+OPTIONS: ^:nil

* Introduction
This document describes the requirements, design and implementation
of the *Router Server*. This server is the only access interface between 
the different nodes like DNS (private & public) and reverse-proxy in the network infrastructure
with the external networks. A router is a networking device that forwards data packets between computer
networks. It acts as a gateway to and for all other servers. The external requests from the different
lab users would have to pass through the router server to reach the internal network nodes.The router could be
seen as device which functions to lock the internet away from your internal network infrastrucutre.
This means that if your internal nodes need to ask for something from the internet, they ask the router and vice versa.

In the current architecture, we are using Ansible scripts to configure
the router server.These scripts are executed directly from the configuration server(Ansible Server). 

* Requirements
The functional and security requirements of router are:

** Functional Requirements
  The router acts as a gateway for all other servers to reach the
  internet. Hence the functional requirements of the router are to
  allow forwarding of packets to reverse proxy on TCP port 80/443 and
  also to public DNS on UDP port 53. Every request from any external
  lab user would be accepted on TCP port 80/443 and UDP port 53.

  Forward incoming SSH connection on TCP port 2222 to Analytics server

** Security Requirements
  All common security requirements and general server hardening as
  described in [[file:common.org::*Security Requirements][common role]] are applicable to router with an exception
  that TCP port 80/443 and UDP port 53 are open for all lab users.
 
* Design
** Overall Network diagram of the router
The following network diagram represents the interaction of the router server with the other machines in the cluster.
It shows the connections from router to other servers and also vice versa, such as DNS,reverse-proxy and the lab users who
would access the network.The major functionality of the router is of the packet forwarding from the outside network into the 
network to the various other devices via different ports i.e. 80,443 and 53 and also using the different network protocols like
TCP and UDP for the communication.
#+CAPTION: Router Configuration diagram
#+LABEL: router-configuration-diagram
[[./diagrams/router-config.png]]

** Important configuration and data files and folders
|------+----------+------------------------------+------------------------|
| Sno. | Service  | File                         | File Type              |
|------+----------+------------------------------+------------------------|
|  1.  | iptables | /etc/sysconfig/iptables      | Firewall Configuration |                                                                      
|------+----------+------------------------------+------------------------|

* Implementation
** Structure of Scripts
- The implementation of this system is in terms of a collection of ansible
  scripts which configures the node. These scripts are organized as follows:

#+BEGIN_EXAMPLE
  |-code
  |   |-- router.yml
  |   |-- roles
  |   |   |-- router
  |   |   |   |-- handlers
  |   |   |   |   `--main.yml
  |   |   |   |-- tasks
  |   |   |   |   `--main.yml
  |   |   |   |-- templates
  |   |   |   |   `--router_iptables
#+END_EXAMPLE

   Here =router.yml= file configures the machine as router with
   router and common roles as explained in detail at [[Router Installation Script][Router Installation Script]].
   =roles/router/handlers/main.yml= file defines various
   handlers which are only executed in case a task notifies them.
   Handlers are described in detail at [[Applying Firewall rules][Applying Firewall rules]].
   
   The handlers are only called when tasks described at [[Enabling IP forwarding][Enabling IP forwarding]] and [[Setting Firewall rules][Setting Firewall rule]] are called as part of
   the router role.  Various templates and files are used
   during task execution for creating necessary configuration files.
  
** Building the Firewall rules
The description of NAT (Network Address Translation) rules are as follows:\\
Default policy for prerouting, postrouting and output is set to be as ACCEPT. If the packet
does not match any rule then the default action is applied to the packet.
Packet counters are set to [0:0].First counter represents the number of
packets that matched the rule for the chain, and second counter represents the
total size of the packets that matched the rule.\\
In NAT rules, the forwarding rules and SNAT (Source Network Address Translation) rules are described as:\\
The nat rule forwards the incoming DNS requests via UDP port 53
to public dns.This is done in the PREROUTING chain, just as the packet comes in;
this means that anything else on the routing will see the packet going to its `real' destination.
Here the `-i' (incoming interface) option can be used. Destination NAT is specified using `-j DNAT', 
and the `--to-destination' option specifies an IP address, a range of IP addresses, and an optional 
port or range of ports (for UDP and TCP protocols only).\\
The SNAT rule will route all packets going outside to router public IP. 
Source NAT (SNAT) changes the source address in IP header of a packet. It may also change 
the source port in the TCP/UDP headers. The typical usage is to change the private 
address/port into a public address/port for packets leaving your network.This is done in the 
POSTROUTING chain, just before it is finally sent out. It also means that the `-o' (outgoing interface)
option can be used.\\

The common firewall rules are the ones which are described in common.
#+BEGIN_SRC yml :tangle roles/router/templates/router_iptables :eval no
*nat
:PREROUTING ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
#Note that request can be forwarded only to one machine and not to multiple machines
#Forward incoming DNS requests to public dns at {{public_dns_ip}} 
-A PREROUTING -d {{router_interface_ip}} -p udp -m udp --dport 53 -j DNAT --to-destination {{public_dns_ip}}:53
#Forward incoming HTTP,HTTPS requests to reverseproxy at {{reverseproxy_ip}}
-A PREROUTING -d {{router_interface_ip}} -p tcp -m tcp --dport 80 -j DNAT --to-destination {{reverseproxy_ip}}:80
-A PREROUTING -d {{router_interface_ip}} -p tcp -m tcp --dport 443 -j DNAT --to-destination {{reverseproxy_ip}}:443
#Forward incoming http request on tcp port 8080 to ADS server
-A PREROUTING -d {{router_interface_ip}} -p tcp -m tcp --dport 8080 -j DNAT --to-destination {{ads_ip}}:8080
#Forward incoming SSH connection on TCP port 2222 to Analytics server
-A PREROUTING -d {{router_interface_ip}} -p tcp -m tcp --dport 2222 -j DNAT --to-destination {{analytics_server_ip}}:22
#
#SNAT all packets going outside to router public IP 
-A POSTROUTING -o {{router_external_interface}} ! -d {{local_subnet}} -j SNAT --to-source {{router_interface_ip}}
#
COMMIT
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
#Accept loopback connections
-A INPUT -i lo -d 127.0.0.0/8 -j ACCEPT
#Accept http/tcp request from internal network for displaying bandwidthd
-A INPUT -s {{local_subnet}} -p tcp -m tcp --dport 8000 -j ACCEPT
#Rate limit new connections to 20 new connections per 30 seconds
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --set
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --rcheck --seconds 30 --hitcount 20 -m limit --limit 2/min -j LOG --log-prefix "new_limit_"
-A INPUT ! -p udp -m state --state NEW -m recent --name ssh_limit --rcheck --seconds 30 --hitcount 20 -j DROP
#Accept ICMP ping requests at limited rate
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG
-A INPUT -p icmp --icmp-type echo-request -j DROP
#Allow ongoing connections
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
#Allow incoming SSH connections from management IPs.  Hopefully fail2ban will take care of bruteforce attacks from management IPs
{% for item in management_ips  %}
-A INPUT -m state --state NEW -s {{item}} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#Allow incoming SSH connections from ansible server IPs.  Hopefully fail2ban will take care of bruteforce attacks from ansible server IPs
{% for item in ansible_server_ips  %}
-A INPUT -m state --state NEW -s {{item}} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#Allow incoming SSH connections from nagios server IPs.  Hopefully fail2ban will take care of bruteforce attacks from ansible server IPs
{% for item in nagios_server_ips  %}
-A INPUT -m state --state NEW -s {{nagios_server_ips[0]}} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#Allow incoming SSH connections from rsnapshot server IPs.  Hopefully fail2ban will take care of bruteforce attacks from ansible server IPs
{% for item in rsnapshot_server_ips  %}
-A INPUT -m state --state NEW -s {{rsnapshot_server_ips[0]}} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}

#Allow incoming NRPE queries for nagios from nagios servers
{% for ip in nagios_server_ips %}
-A INPUT -m state --state NEW -s {{ip}} -p tcp -m tcp --dport 5666 -j ACCEPT
{% endfor %}
#Allow SNMP queries from cacti servers
#-A INPUT -p udp -m udp --dport 161 -j ACCEPT
#-A INPUT -p udp -m udp --dport 162 -j ACCEPT
#Log all other "blocked_input_" attempts with rate limiting
-A INPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_input_"
#Reply with proper ICMP error message and reject the connection
-A INPUT -j REJECT --reject-with icmp-host-prohibited
#Enable packet forwarding through
-A FORWARD -j ACCEPT 
#
#
##Output rules
#Allow outgoing connections to localhost
-A OUTPUT -s 127.0.0.0/8 -o lo -j ACCEPT
#Allow ongoing connections
-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
#Allow DNS queries
-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT
#Allow server to send emails.  Required for sending logwatch emails
-A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT
#Allow server to contact web-servers.  This is must for router to be able to forward requests to reverseproxy server. 
-A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT
#Allow outgoing tcp 22 to analytics server, port forwarding
-A OUTPUT -p tcp -m tcp -d {{analytics_server_ip}} --dport 22 -j ACCEPT
#Allow outgoing ping requests
-A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
#Allow outgoing connections to rsyslog server
-A OUTPUT -p udp -m udp --dport 514 -j ACCEPT
#Allow outgoing connections to OSSEC server
-A OUTPUT -p udp -m udp --dport 1514 -j ACCEPT
#Log all other "blocked_output_" attempts
-A OUTPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_output_"
#Reply with proper ICMP error message and reject the connection
-A OUTPUT -j REJECT --reject-with icmp-host-prohibited
COMMIT
#+END_SRC
** Enabling IP forwarding
- IP forwarding has to be enabled when we have to configure our machines as router.If we are setting up a
  Linux router/gateway or maybe a VPN server or just a plain dial-in server then we will need to enable IP forwarding.
#+BEGIN_SRC yml :tangle roles/router/tasks/main.yml
---
- name: Enable IP forwarding
  lineinfile: line="net.ipv4.ip_forward = 1" regexp="^net.ipv4.ip_forward" dest=/etc/sysctl.conf
  notify:
    - enable_ip_forwarding
#+END_SRC

** Setting Firewall rules
- Firewall rules are set by following steps:
   1) Copy iptables configuration file from the ansible machine to the router
      machine.
   2) Restart iptables service to enforce the configuration.
#+BEGIN_SRC yml :tangle roles/router/tasks/main.yml
- name: Copying iptables config files
  template: src=router_iptables dest=/etc/sysconfig/iptables owner=root group=root mode=600
  notify:
    - restart iptables
#+END_SRC
   
** Applying Firewall rules 
- Any changes in the iptables configuration file to update the firewall is enforced
  by restarting the iptables service.
#+BEGIN_SRC yml :tangle roles/router/handlers/main.yml
---
 - name: restart iptables
   service: name=iptables state=restarted
#+END_SRC

** Installing and configuring =bandwidthd=
- =bandiwdthd= is an application to monitor bandwidth usage of
  different hosts. It depends on =hhtp= server to display the
  statistics.
#+BEGIN_SRC yml :tangle roles/router/tasks/main.yml
- name: install bandwidthd
  yum: name=bandwidthd state=installed

- name: configure bandwidthd to monitor proper interfaces, subnets by copying
  template: src=bandwidthd.conf dest=/etc/bandwidthd.conf

- name: ensure bandwidthd is enabled and restart it.
  service: name=bandwidthd state=restarted enabled=yes

- name: modify apache on router to listen on port 8000 on local_subnet
  lineinfile: dest=/etc/httpd/conf/httpd.conf regexp="^Listen " line="Listen {{router_internal_ip}}:8000"

- name: restart apache to start bandwidthd monitoring
  service: name=httpd state=restarted enabled=yes
#+END_SRC

- =bandwidthd= is configured to listen on the internal ethernet device
  =eth0= and monitor the internal/private subnet on which all other
  machines are bound to communicate, except the config server.
#+BEGIN_SRC yml :tangle roles/router/templates/bandwidthd.conf
####################################################
# Bandwidthd.conf
# 
# Commented out options are here to provide
# documentation and represent defaults

# Subnets to collect statistics on.  Traffic that 
# matches none of these subnets will be ignored.
# Syntax is either IP Subnet Mask or CIDR
#subnet 10.0.0.0 255.0.0.0
#subnet 192.168.0.0/16
#subnet 172.16.0.0/12

#Adding subnets from common_vars
subnet {{local_subnet}}
#subnet {{router_interface_ip}}/32

# Device to listen on
# Bandwidthd listens on the first device it detects
# by default.  Run "bandwidthd -l" for a list of 
# devices. 
#dev "eth0"

#Interface both internal and external of the router

dev "eth0"
#dev "eth1"

###################################################
# Options that don't usually get changed

# An interval is 2.5 minutes, this is how many 
# intervals to skip before doing a graphing run
#skip_intervals 0

# Graph cutoff is how many k must be transfered by an
# ip before we bother to graph it
#graph_cutoff 1024

#Put interface in promiscuous mode to score to traffic
#that may not be routing through the host machine.
#promiscuous true

#Log data to cdf file htdocs/log.cdf
#output_cdf false

#Read back the cdf file on startup
#recover_cdf false

#Libpcap format filter string used to control what bandwidthd see's
#Please always include "ip" in the string to avoid strange problems
#filter "ip"

#Draw Graphs - This default to true to graph the traffic bandwidthd is recording
#Usually set this to false if you only want cdf output or
#you are using the database output option.  Bandwidthd will use very little
#ram and cpu if this is set to false.
#graph true

#Set META REFRESH seconds (default 150, use 0 to disable).
#meta_refresh 150
#+END_SRC
** Variables Definition
- Variables are used by the ansible scripts to configure router. Values of these
  variables are fetched from the "common_vars" role.
  1) Proxy environment
  2) Ansible server ip
#+BEGIN_SRC yaml :tangle roles/common/meta/main.yml
---
dependencies:
- role: common_vars
#+END_SRC

** Router Installation Script
- Router is configured by using common,ossec_client,rsyslog_client,nagios_client and router roles.
#+BEGIN_SRC yaml :tangle router.yaml
---
- name: This file configures machine as router  
  hosts: router
  remote_user: root

  vars:
   #Avoids changing the default route
   i_router: yes 
   host_name: "router.{{prefix}}vlabs.ac.in"

  roles:
   - common
   - ossec_client
   - rsyslog_client
   - rsnapshot_client
   - nagios_client
   - router
#+END_SRC

* Test Cases
** COMMENT Test case ID: TC01
*** COMMENT Objective
The objective is to test the working of the router to be able to forward the 
request of an external user/lab user to the public DNS and also is able to 
forward the incoming reply from the public DNS for the same request to the lab
user with the name resolved.
*** COMMENT Apparatus
- The router container/machine
- 
*** COMMENT Theory


** Test case ID :: TC01
*** Objective 
    The objective of this test case is to test whether the router is
    working and is able to forward the requests to the Public
    DNS. This test also shows that the Public DNS, reverse proxy, the
    private DNS, basically the entire network functions properly.
*** Apparatus
    - The router machine
    - Any machine in the IIIT network.
    - Access to the testing cluster. 
*** Theory
    The router is the point of contact between the outside world and
    our network of machines. So when a request for any URL belonging
    to our domain is made, the request first goes to the router. The
    router then forwards the request to the Public DNS via port 53.
    Once the query is processed by the Public DNS, it replies back to
    the router again via port 53. The router then sends back the reply
    to the client that made the request via port 53.
*** Procedure
    - Open a terminal on your machine.
    - The ssh tunnel already contains the command-line tools. They
      need not be installed.
    - Now on this machine we need to run the command-line tool to
      query the DNS server.
    - Now we run the tools as follows:
      #+BEGIN_EXAMPLE
      dig <FQDN> @<Router Public IP>
      #+END_EXAMPLE
    - We can also use the nslookup tool.
      #+BEGIN_EXAMPLE
      nslookup <FQDN> <Router Public IP>
      #+END_EXAMPLE
    - By running these commands we can determine if the DNS is being
      contacted by the router for resolving the names.
*** Experiment
    We need to perform testing by using the command line tools. After
    logging into ssh tunnel do the following:
    #+BEGIN_EXAMPLE
    nslookup ossec-server.virtual-labs.ac.in 10.4.14.200
    #+END_EXAMPLE
    and 
    #+BEGIN_EXAMPLE
    dig ossec-server.virtual-labs.ac.in @10.4.14.200
    #+END_EXAMPLE

*** Result
    - The result obtained from the first command is as below : 
    
    #+BEGIN_EXAMPLE
    Server:		10.4.14.200
    Address:	10.4.14.200#53

    Name:	ossec-server.test.virtual-labs.ac.in
    Address: 10.4.14.200
    #+END_EXAMPLE
    
    - The result obtained from the second command is as below:

    #+BEGIN_EXAMPLE
    ; <<>> DiG 9.9.5-3ubuntu0.2-Ubuntu <<>> ossec-server.test.virtual-labs.ac.in 10.4.14.200
    ;; global options: +cmd
    ;; Got answer:
    ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 63505
    ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 2

    ;; OPT PSEUDOSECTION:
    ; EDNS: version: 0, flags:; udp: 4096
    ;; QUESTION SECTION:
    ;ossec-server.test.virtual-labs.ac.in. IN A

    ;; ANSWER SECTION:
    ossec-server.test.virtual-labs.ac.in. 3600 IN A	10.4.14.200

    ;; AUTHORITY SECTION:
    test.virtual-labs.ac.in. 600	IN	NS	public-dns.test.virtual-labs.ac.in.

    ;; ADDITIONAL SECTION:
    public-dns.test.virtual-labs.ac.in. 781	IN A	10.4.14.200

    ;; Query time: 8 msec
    ;; SERVER: 127.0.1.1#53(127.0.1.1)
    ;; WHEN: Wed Apr 22 12:45:43 IST 2015
    ;; MSG SIZE  rcvd: 122

    ;; Got answer:
    ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 31098
    ;; flags: qr aa rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

    ;; QUESTION SECTION:
    ;10.4.14.200.			IN	A

    ;; ANSWER SECTION:
    10.4.14.200.		0	IN	A	10.4.14.200

    ;; Query time: 14 msec
    ;; SERVER: 127.0.1.1#53(127.0.1.1)
    ;; WHEN: Wed Apr 22 12:45:43 IST 2015
    ;; MSG SIZE  rcvd: 45
    #+END_EXAMPLE

*** Observation
    The response received from the command-line tools shows that the
    requests were forwarded to the Public DNS from the router to
    process the requests.

*** Conclusion
    The router is forwarding DNS queries to the Public DNS.


** COMMENT Test case ID :: TC03
*** Objective 
    The objective of this test case is to test the functionality of
    the router contacting the Reverse Proxy. This test is intended for
    the testing of the reverse proxy and router without the Public
    DNS.
*** Apparatus
    - The router machine
    - One test squid proxy
    - A machine/laptop with browser. 
*** Theory
    The router on receiving the request on port 80 sends it to the
    reverseproxy. The reverse proxy then forwards the request to the
    required labs requested by the user. To provide a testing environment specific
    for testing the reverse proxy we created a test squid proxy. We
    require a machine which has internet access and can contact the
    router and get the lab. To see if the lab is accessed we need a
    browser. In order that all these be satified we setup a test
    proxy. This allows you to have a container/machine which has
    internet access to make a request to the router for particular
    labs. The etc/hosts of the proxy we set the names along

*** Procedure

*** Experiment
    
*** Result
    
*** Observation
    
*** Conclusion
    

** Test case ID :: TC02
*** Objective
    The objective of this test case is to test if the router acts as a
    gateway to the other machines while trying to acces the internet.
*** Apparatus
    - Any machine in the cluster other than router and ansible.
*** Theory
    The router is the gateway for the other machines in the
    cluster. Any packet entering the system as well as leaving the
    system need to go via the router. When the other machines in the
    cluster require to access internet, the packets sent by them go
    through the router. This is a critical point, because if this is
    not happening then the containers have direct internet access,
    which is violating our network design.

*** Procedure
    - Login to any of the amachine in the cluster other than route or
      ansible.
    - Run the ="traceroute -I"= command on this machine.
    - Check the output of this command to see if you find the router
      IP.
    - If found test pass.

*** Experiment
    - Run the traceroute command 
    #+BEGIN_EXAMPLE
    traceroute -I google.com
    #+END_EXAMPLE
    - Check the output for the <Router IP>

*** Result
    The output for the traceroute command is as follows:
    #+BEGIN_EXAMPLE
    traceroute to google.com (173.194.36.97), 30 hops max, 60 byte packets
    1  10.100.1.1 (10.100.1.1)  0.072 ms  0.017 ms  0.015 ms
    2  196.12.34.80 (196.12.34.80)  2.319 ms  2.342 ms  2.573 ms
    3  125.16.7.97 (125.16.7.97)  4.961 ms  5.041 ms  6.778 ms
    4  203.101.100.93 (203.101.100.93)  9.952 ms  10.265 ms  10.650 ms
    5  203.101.95.229 (203.101.95.229)  19.531 ms  19.015 ms  19.855 ms
    6  203.101.100.110 (203.101.100.110)  35.580 ms  33.384 ms  33.708 ms
    7  182.79.235.249 (182.79.235.249)  22.175 ms  20.182 ms  20.288 ms
    8  72.14.220.197 (72.14.220.197)  33.761 ms  32.787 ms  32.820 ms
    9  209.85.241.52 (209.85.241.52)  32.709 ms  29.291 ms  29.510 ms
    10  209.85.142.128 (209.85.142.128)  58.456 ms  58.176 ms  58.294 ms
    11  209.85.240.17 (209.85.240.17)  50.154 ms  50.190 ms  50.346 ms
    12  del01s07-in-f1.1e100.net (173.194.36.97)  51.092 ms  50.165 ms  51.288 ms
    #+END_EXAMPLE

*** Observation
    The output of the traceroute command shows that the router IP
    (10.100.1.1) is present. This shows that the given machine
    accesses the internet via the router(ie.gateway).

*** Conclusion
    The router and the machine configuration are set properly
    according to the network design.
